{"version":3,"sources":["component/App.tsx","component/organisms/Header.tsx","component/organisms/Movie.tsx","component/organisms/Search.tsx","serviceWorker.ts","index.tsx"],"names":["ActionName","Header","text","AppBar","position","Toolbar","Typography","component","MovieComponent","movie","poster","Poster","Card","style","width","marginTop","CardMedia","height","image","title","Title","CardContent","Year","Search","search","useState","searchValue","setSearchValue","onSubmit","e","preventDefault","TextField","type","value","onChange","target","initialState","loading","movies","errorMessage","reducer","state","action","REQUEST","SUCCESS","payload","FAILURE","error","Error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Fragment","Container","maxWidth","CssBaseline","Box","mt","textAlign","Response","display","flexWrap","justifyContent","map","index","Movie","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1d6fc861.chunk.js","sourcesContent":["import React, {useReducer, useEffect} from 'react'\nimport {\n    CssBaseline,\n    Container,\n    Typography,\n    Box,\n} from '@material-ui/core'\nimport Header from './organisms/Header'\nimport Movie from './organisms/Movie'\nimport Search from './organisms/Search'\n\nexport interface Movie {\n    Title: string\n    Year: string\n    imdbID: string\n    Type: string\n    Poster: string\n}\n\ninterface State {\n    loading: boolean\n    movies: Movie[]\n    errorMessage: string | null\n}\n\nenum ActionName {\n    REQUEST = 'SEARCH_MOVIES_REQUEST',\n    SUCCESS = 'SEARCH_MOVIES_SUCCESS',\n    FAILURE = 'SEARCH_MOVIES_FAILURE',\n}\n\ninterface REQUEST {\n    type: ActionName.REQUEST\n}\n\ninterface SUCCESS {\n    type: ActionName.SUCCESS\n    payload: Movie[]\n}\n\ninterface FAILURE {\n    type: ActionName.FAILURE\n    error: string\n}\n\ntype MovieActions = REQUEST | SUCCESS | FAILURE\n\nconst MOVIE_API_URL = 'https://www.omdbapi.com/?s=man&apikey=4a3b711b'\n\nconst initialState: State = {\n    loading: true,\n    movies: [],\n    errorMessage: null,\n}\n\nconst reducer: React.Reducer<State, MovieActions> = (state, action): State => {\n    switch (action.type) {\n        case ActionName.REQUEST:\n            return {\n                ...state,\n                loading: true,\n                errorMessage: null\n            }\n        case ActionName.SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                movies: action.payload\n            }\n        case ActionName.FAILURE:\n            return {\n                ...state,\n                loading: false,\n                errorMessage: action.error\n            }\n        default:\n            throw new Error()\n    }\n}\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        fetch(MOVIE_API_URL)\n            .then(response => response.json())\n            .then(jsonResponse => {\n                dispatch({\n                    type: ActionName.SUCCESS,\n                    payload: jsonResponse.Search\n                })\n            })\n    }, [])\n\n    const search = (searchValue: string): void => {\n        dispatch({\n            type: ActionName.REQUEST\n        })\n\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n            .then(response => response.json())\n            .then(jsonResponse => {\n                if (jsonResponse.Response === 'True') {\n                    dispatch({\n                        type: ActionName.SUCCESS,\n                        payload: jsonResponse.Search\n                    })\n                } else {\n                    dispatch({\n                        type: ActionName.FAILURE,\n                        error: jsonResponse.Error\n                    })\n                }\n            })\n    }\n\n    const {movies, errorMessage, loading} = state\n\n    return (\n        <React.Fragment>\n            <Header text='MovieSearch'/>\n            <Container component='main' maxWidth='md'>\n                <CssBaseline/>\n                <Box\n                    mt={4}\n                    textAlign='center'\n                >\n                    <Search search={search}/>\n                    <Typography component='p'>Sharing a few of our favourite movies</Typography>\n                </Box>\n                <Box\n                    mt={4}\n                    display='flex'\n                    flexWrap='wrap'\n                    justifyContent='space-around'\n                >\n                    {loading && !errorMessage ? (\n                        <Typography component='p'>loading... </Typography>\n                    ) : errorMessage ? (\n                        <Typography component='p'>{errorMessage}</Typography>\n                    ) : (\n                        movies.map((movie: Movie, index: number) => (\n                            <Movie key={`${index}-${movie.Title}`} movie={movie}/>\n                        ))\n                    )}\n                </Box>\n            </Container>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n} from '@material-ui/core'\n\ninterface HeaderProps {\n    text: string\n}\n\nconst Header: React.FC<HeaderProps> = ({text}) => {\n    return (\n        <AppBar position='static'>\n            <Toolbar>\n                <Typography component='h2'>\n                    {text}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n    Card,\n    CardMedia,\n    CardContent,\n    Typography,\n} from '@material-ui/core'\nimport {Movie} from '../App'\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n    'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg'\n\ninterface MovieProps {\n    movie: Movie\n}\n\nconst MovieComponent: React.FC<MovieProps> = ({movie}) => {\n    const poster =\n        movie.Poster === 'N/A' ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster\n    return (\n        <Card\n            style={{\n                width: 200,\n                marginTop: '8px'\n            }}\n        >\n            <CardMedia\n                style={{\n                    height: 300,\n                }}\n                image={poster}\n                title={`The movie titled: ${movie.Title}`}\n                component='img'\n            />\n            <CardContent>\n                <Typography component='h2'>{movie.Title}</Typography>\n                <Typography component='p'>({movie.Year})</Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\n\nexport default MovieComponent\n","import React, {useState} from 'react'\nimport {\n    TextField,\n} from '@material-ui/core'\n\ninterface SearchProps {\n    search: (arg: string) => void\n}\n\nconst Search: React.FC<SearchProps> = ({search}) => {\n    const [searchValue, setSearchValue] = useState('')\n\n    const handleSearchInputChanges = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setSearchValue(e.target.value)\n    }\n\n    const resetInputField = () => {\n        setSearchValue('')\n    }\n\n    const callSearchFunction = (e: React.MouseEvent<HTMLFormElement>): void => {\n        e.preventDefault()\n        search(searchValue)\n        resetInputField()\n    }\n\n    return (\n        <form\n            onSubmit={callSearchFunction}\n        >\n            <TextField\n                type='text'\n                value={searchValue}\n                onChange={handleSearchInputChanges}\n            />\n            <TextField\n                type='submit'\n                value='SEARCH'\n            />\n        </form>\n    )\n}\n\nexport default Search\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './component/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}